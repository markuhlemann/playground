swagger: "2.0"
info:
  description: "This is the API definition for the Employee performance evaluation process."
  version: "1.0.29"
  title: "Performance Evaluation by Woolies"
host: "my.wowcareers.com.au"
basePath: "/"
tags:
- name: "myplan"
  description: "Everything related to my plan"
schemes:
- "http"
paths:


  /employee/version:
    get:
      tags:
      - "employee"
      summary: "Returns the version of the API layer"
      operationId: getVersion
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:  
            type: string


  /employee/getUserDetails:
    get:
      tags:
      - "employee"
      summary: "Returns the User details for the logged in User"
      operationId: getUserDetails
      parameters:
      - name: "userName"
        in: "query"
        description: "the username to retrieve values for"
        required: false
        type: string
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:  
            $ref: "#/definitions/UserData" 
        417:
          description: "Critical User details couldn't be read that are a prerequisite for further operations"

  /employee/getUserPhoto:
    get:
      tags:
      - "employee"
      summary: "Returns the User details for the logged in User"
      operationId: getUserPhoto
      parameters:
      - name: "userName"
        in: "query"
        description: "the username to retrieve values for"
        required: false
        type: string
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:  
            type: object
            title: userPhoto
            properties:
              photo:
                type: string
              mimeType:
                type: string            
            
  /employee/getTeamMemberDetails:
    get:
      tags:
      - "employee"
      summary: "Retrieves the Team Members for a Team Leader, including the stage of the Goal Setting Process"
      operationId: getTeamMemberDetails
      parameters:
      - name: "goalPlanTemplateId"
        in: "query"
        description: "the goal plan template Id for which to execute the preparation"
        required: true
        type: string
      - name: "readGoalStage"
        in: "query"
        description: "If the parameter is present and true, the Goal Stage should be read"
        required: false
        type: boolean
      - name: "checkIsMemberTeamLead"
        in: "query"
        description: "If the parameter is present and true, checks whether the team member is also a team lead"
        required: false
        type: boolean
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:  
            type: object
            title: teamMembers
            properties:
              teamMembers:
                type: array
                items:
                  $ref: "#/definitions/TeamMemberDetails"
              responseData:
                $ref: "#/definitions/ResponseData"
                

  /employee/sendEmailNotification:
    post:
      tags:
      - "employee"
      summary: "Sends an email notification to the user"
      operationId: sendEmailNotification
      parameters:
      - name: "recipient"
        in: "query"
        description: "the recipient of the email"
        required: true
        type: string
      - name: "notificationType"
        in: "query"
        description: "The Type of notification. Possible values are ..."
        required: true
        type: string
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseData"


  /employee/checkAccess:
    get:
      tags:
      - "employee"
      summary: "Checks the access to the My Plan application. This should only be accessible to salaried employees. This operation checks for the group XXX to be assigned in SuccessFactors."
      operationId: checkAccess
      produces:
      - "application/json"
      responses:
        200:
          description: "access granted"
        403: 
          description: "not a salaried employee"

  /employee/resetTestUser:
    get:
      tags:
      - "employee"
      summary: "Resets the test user and removes all goals. This is only available on non-production systems"
      operationId: resetTestUser
      parameters:
      - name: "userName"
        in: "query"
        description: "the username to reset the goals for"
        required: true
        type: string
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/ResponseData"


#######################################################################################################
#######################################################################################################
############################################ Goals ####################################################
#######################################################################################################
#######################################################################################################


  /goals/getGoalTemplateId:
    get:
      tags:
      - "goals"
      summary: "OBSOLETE - Return the current Goal Plan Template ID of the logged in Employee"
      operationId: getGoalPlanTemplateId
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:  
            $ref: "#/definitions/GoalPlanTemplateIdResponse"

  /goals/getGoalPlanTemplates:
    get:
      tags:
      - "goals"
      summary: "Retrieves the details of the Goal Plan Template Id. Chooses the current one by default, but can be switched to a different Goal Plan Template Id"
      operationId: getGoalPlanTemplates
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:  
            type: object
            title: goalPlanResponse
            properties:
              defaultGoalPlanTemplateId:
                type: string
              goalPlanTemplates:
                type: array
                items:
                  $ref: "#/definitions/GoalPlanTemplate"
              responseData:
                $ref: "#/definitions/ResponseData"

  /goals/getGoalTemplatePicklists:
    get:
      tags:
      - "goals"
      summary: "OBSOLETE - Returns the defined Picklists for the Goal Templates"
      operationId: getGoalTemplatePicklists
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema: 
            $ref: "#/definitions/GoalPlanPicklistsResponse"
            

  /goals/getGoalsForUserFlat:
    get:
      tags:
      - "goals"
      summary: "Returns all goals stored against a goal plan for a specific user in a selected year. The result list is flat and does not have structure regarding the category"
      operationId: getGoalsForUserFlat
      parameters:
      - name: "userName"
        in: "query"
        description: "the username to retrieve values for"
        required: false
        type: string
      - name: "goalTemplateId"
        in: "query"
        description: "the ID of the goal template to retrieve the the goals from. Defaulted to the current goal template "
        required: false
        type: string
      - name: "categoryId"
        in: "query"
        description: "The category that the result should be limited to"
        required: false
        type: string      
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:  
            $ref: "#/definitions/Goals"


  /goals/upsertGoalsFlat:
    post:
      tags:
      - "goals"
      summary: "Upsert one or many goals against SuccessFactors"
      operationId: upsertGoalsFlat
      parameters:
      - name: "goals"
        in: "body"
        description: "the goals to import"
        required: true
        schema: 
          $ref: "#/definitions/Goals"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/ResponseData"

  /goals/showSplashPage:
    get:
      tags:
      - "goals"
      summary: "Checks whether to show a splash page for the user in the particular context. The context itself is a key that can be used by the administrator to use different splash pages at different stages in the application"
      operationId: showSplashPage
      parameters:
      - name: "goalTemplateId"
        in: "query"
        description: "the ID of the goal template to retrieve the the goals from. Defaulted to the current goal template"
        required: false
        type: string
      - name: "key"
        in: "query"
        description: "The context in which the application is checking whether to display the splash page"
        required: true
        type: string      
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:  
            type: object
            title: splashPageResponse
            properties:
              showSplashPage:
                type: boolean
              responseData:
                $ref: "#/definitions/ResponseData"
    
  /goals/getUserContext:
    get:
      tags:
      - "goals"
      summary: "Retrieves the user specific settings that the application users in order to determine behavior. This is used e.g. to remember that a user acknowledged the splash page and other user dialogs"
      operationId: getUserContext
      parameters:
      - name: "goalTemplateId"
        in: "query"
        description: "the ID of the goal template to retrieve the the goals from. Defaulted to the current goal template"
        required: false
        type: string
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:  
            type: object
            title: userContextResponse
            properties:
              userContextSettings:
                type: array
                items:
                  $ref: "#/definitions/UserContextSetting"
              responseData:
                $ref: "#/definitions/ResponseData"
    
  /goals/getExampleGoalForCategory:
    get:
      tags:
      - "goals"
      summary: "Retrieves the Example Goal for a specific business unit and for a category"
      operationId: getExampleGoalForCategory
      parameters:
      - name: "category"
        in: "query"
        description: "the category to which to select the Example Goal for"
        required: true
        type: string
      - name: "brandId"
        in: "query"
        description: "the brandId to which to select the Example Goal for"
        required: true
        type: string
      - name: "goalPlanTemplateId"
        in: "query"
        description: "the goalPlanTemplateId to which to select the Example Goal for"
        required: true
        type: string
      - name: "opsCategoryID"
        in: "query"
        description: "cust_OpsSupportCategoryID to determine Example Goal and Assigned Goal"
        required: true
        type: string
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:  
            $ref: "#/definitions/Goals"
              
                
  
  /goals/acknowledgeSplashPage:
    post:
      tags:
      - "goals"
      summary: "Indicates that the user has seen and acknowledges the splash page shown in the application. This updates the user context with the information that it will not be shown again the next time the application is started"
      operationId: acknowledgeSplashPage
      parameters:
      - name: "goalPlanTemplateId"
        in: "query"
        description: "the goal plan template Id for which the splash page is acknowledged"
        required: true
        type: string
      produces:
      - "application/json"
      responses:
        201:
          description: "operation successful"
          schema:
            $ref: "#/definitions/ResponseData"
        204:
          description: "user has already acknowledged"
          schema:
            $ref: "#/definitions/ResponseData"
              

  /goals/prepareFirstTimeGoalSetting:
    post:
      tags:
      - "goals"
      summary: "Reads all assigned goals to a user and saves them in the goal plan for this year"
      operationId: prepareFirstTimeGoalSetting
      parameters:
      - name: "goalPlanTemplateId"
        in: "query"
        description: "the goal plan template Id for which to execute the preparation"
        required: true
        type: string
      - name: "userName"
        in: "query"
        description: "the User Name which to execute the preparation"
        required: true
        type: string
      
      produces:
      - "application/json"
      responses:
        201:
          description: "operation successful"
          schema:
            $ref: "#/definitions/ResponseData"
        204:
          description: "Preparation already performed"
          schema:
            $ref: "#/definitions/ResponseData"

  /goals/getApplicationState:
    get:
      tags:
      - "goals"
      summary: "Retrieves the state of the application, both for Wizard as well as for Goal Plan"
      operationId: getApplicationState
      parameters:
      - name: "userName"
        in: "query"
        description: "the user for which to query the state"
        required: true
        type: string
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:  
            type: object
            title: applicationState
            properties:
              goalPlanState:
                type: string
              onboardingWizardState:
                type: string
              responseData:
                $ref: "#/definitions/ResponseData"
        417:
          description: "Failed to load application state"
  
  /goals/shareWithTeamLead:
    post:
      tags:
      - "goals"
      summary: "This operation is used to share all goals with the Team Lead and send the respective notifications"
      operationId: shareWithTeamLead
      parameters:
      - name: "goals"
        in: "body"
        description: "the Goals to share"
        required: true
        schema:
          $ref: "#/definitions/Goals"
      - name: "goalPlanTemplateId"
        in: "query"
        description: "the goal plan template Id for which to execute the preparation"
        required: false
        type: string
      produces:
      - "application/json"
      responses:
        201:
          description: "operation successful"
          schema:
            type: array
            items:
              $ref: "#/definitions/ResponseData"
        500:
          description: "error during update"
          schema:
            type: array
            items:
              $ref: "#/definitions/ResponseData"

  /goals/updateLastCompletedWizardStep:
    post:
      tags:
      - "goals"
      summary: "This operation updates the last completed wizard step for the user"
      operationId: updateLastCompletedWizardStep
      parameters:
      - name: "step"
        in: "query"
        description: "the last completed wizard step for the user"
        required: true
        type: string
      - name: "firstName"
        in: "query"
        description: "the first name of the user"
        required: false
        type: string
      - name: "lastName"
        in: "query"
        description: "the last name of the user"
        required: false
        type: string
      - name: "goalPlanTemplateId"
        in: "query"
        description: "the goal plan template Id for which to execute the preparation. Using the default value if not provided"
        required: false
        type: string
      produces:
      - "application/json"
      responses:
        201:
          description: "operation successful"
          schema:
            $ref: "#/definitions/ResponseData"
        500:
          description: "error during update"
          schema:
            $ref: "#/definitions/ResponseData"

  /goals/saveGoalUpdates:
    post:
      tags:
      - "goals"
      summary: "The operation saveGoalUpdates is called when the Team Member is editing a Goal in the Goal review page and saves those changes."
      operationId: saveGoalUpdates
      parameters:
      - name: "goal"
        in: "body"
        description: "the Goal to update"
        required: true
        schema:
          $ref: "#/definitions/Goal"
      - name: "goalPlanTemplateId"
        in: "query"
        description: "the goal plan template Id for which to execute the preparation. Using the default value if not provided"
        required: false
        type: string
      produces:
      - "application/json"
      responses:
        201:
          description: "operation successful"
          schema:
            $ref: "#/definitions/ResponseData"
        500:
          description: "error during update"
          schema:
            $ref: "#/definitions/ResponseData"

  /goals/deleteCustomGoal:
    delete:
      tags:
      - "goals"
      summary: "The operation deleteCustomGoal is called when the Team Member is deleting a custom Goal. This only works for Custom Goals which are still in Draft status. Not possible in other cases."
      operationId: deleteCustomGoal
      parameters:
      - name: "goalId"
        in: "query"
        description: "the id of the Goal to delete"
        required: true
        type: string
      - name: "goalPlanTemplateId"
        in: "query"
        description: "the goal plan template Id for which to execute the preparation. Using the default value if not provided"
        required: false
        type: string
      produces:
      - "application/json"
      responses:
        201:
          description: "operation successful"
          schema:
            $ref: "#/definitions/ResponseData"
        500:
          description: "error during update"
          schema:
            $ref: "#/definitions/ResponseData"


  /goals/requestGoalRemoval:
    post:
      tags:
      - "goals"
      summary: "The operation requestGoalRemoval is called when the Team Member is requesting the removal of a goal. This can happen from the Goals Review page as well as from the Onboarding Wizard."
      operationId: requestGoalRemoval
      parameters:
      - name: "goal"
        in: "body"
        description: "The goal for which removal is requested"
        required: true
        schema:
          $ref: "#/definitions/Goal"
      - name: "goalPlanTemplateId"
        in: "query"
        description: "the goal plan template Id for which to execute the preparation. Using the default value if not provided"
        required: false
        type: string
      produces:
      - "application/json"
      responses:
        201:
          description: "operation successful"
          schema:
            type: array
            items:
              $ref: "#/definitions/ResponseData"
        500:
          description: "error during update"
          schema:
            type: array
            items:
              $ref: "#/definitions/ResponseData"

  /goals/cascadeGoalToTeamMembers:
    post:
      tags:
      - "goals"
      summary: "The operation cascadeGoalToTeamMembers is called when the Team Leader is cascading one Goal to the direct reports."
      operationId: cascadeGoalToTeamMembers
      parameters:
      - name: "goal"
        in: "body"
        description: "the Goal to be cascaded"
        required: true
        schema:
          $ref: "#/definitions/Goal"
      - name: "goalPlanTemplateId"
        in: "query"
        description: "the goal plan template Id for which to execute the preparation. Using the default value if not provided"
        required: false
        type: string
      - name: "teamMember"
        in: "query"
        description: "the username of the team member for whom goal is cascaded"
        required: true
        type: string
      produces:
      - "application/json"
      responses:
        201:
          description: "operation successful"
          schema:
            type: array
            items:
              $ref: "#/definitions/ResponseData"
        500:
          description: "error during update"
          schema:
            type: array
            items:
              $ref: "#/definitions/ResponseData"

  /goals/acknowledgeGoalsForTM:
    post:
      tags:
      - "goals"
      summary: "The operation acknowledgeGoalsForTM is called when the Team Leader is acknowledging the Goals for the Team Member."
      operationId: acknowledgeGoalsForTM
      parameters:
      - name: "goals"
        in: "body"
        description: "All goals in the Goal Plan to be acknowledged"
        required: true
        schema:
          $ref: "#/definitions/Goals"
      - name: "userName"
        in: "query"
        description: "The name of the Team Member for which the goals should be acknowledged"
        required: false
        type: string
      - name: "goalPlanTemplateId"
        in: "query"
        description: "the goal plan template Id for which to execute the preparation"
        required: false
        type: string
      produces:
      - "application/json"
      responses:
        201:
          description: "operation successful"
          schema:
            type: array
            items:
              $ref: "#/definitions/ResponseData"
        500:
          description: "error during update"
          schema:
            type: array
            items:
              $ref: "#/definitions/ResponseData"
              
  /goals/sendBackFeedback_old:
    post:
      tags:
      - "goals"
      summary: "The operation sendBackFeedback is called when the Team Leader is NOT acknowledging the Goals for the Team Member, but instead sends it back to the Team Member with comments."
      operationId: sendBackFeedback_old
      parameters:
      - name: "userName"
        in: "query"
        description: "The username of the Team Member for which the feedback is intended"
        required: true
        type: string
      - name: "feedbackComment"
        in: "body"
        description: "The comment of the feedback for the Team Member"
        required: true
        schema: 
          type: object
          properties: 
            feedbackComment:
              type: string
      - name: "goalPlanTemplateId"
        in: "query"
        description: "the goal plan template Id for which to execute the preparation. Using the default value if not provided"
        required: false
        type: string
      produces:
      - "application/json"
      responses:
        201:
          description: "operation successful"
          schema:
            $ref: "#/definitions/ResponseData"
        500:
          description: "error during update"
          schema:
            $ref: "#/definitions/ResponseData"

  /goals/sendBackFeedback:
    post:
      tags:
      - "goals"
      summary: "The operation sendBackFeedback is called when the Team Leader is NOT acknowledging the Goals for the Team Member, but instead sends it back to the Team Member with comments."
      operationId: sendBackFeedback
      parameters:
      - name: "userName"
        in: "query"
        description: "The username of the Team Member for which the feedback is intended"
        required: true
        type: string
      - name: "feedbackGoal"
        in: "body"
        description: "The comment of the feedback for the Team Member"
        required: true
        schema: 
          $ref: "#/definitions/Goal"
      - name: "goalPlanTemplateId"
        in: "query"
        description: "the goal plan template Id for which to execute the preparation. Using the default value if not provided"
        required: false
        type: string
      produces:
      - "application/json"
      responses:
        201:
          description: "operation successful"
          schema:
            $ref: "#/definitions/ResponseData"
        500:
          description: "error during update"
          schema:
            $ref: "#/definitions/ResponseData"
  /goals/cancelRemovalRequest:
    post:
      tags:
      - "goals"
      summary: "This operation cancels a removal request and updates the status of the Goal depending on the Goal Plan status"
      operationId: cancelRemovalRequest
      parameters:
      - name: "goalPlanTemplateId"
        in: "query"
        description: "the goal plan template Id for which to execute the preparation"
        required: false
        type: string
      - name: "goal"
        in: "body"
        description: "The Goal to update"
        required: true
        schema: 
          $ref: "#/definitions/Goal"
      - name: "goalPlanState"
        in: "query"
        description: "The state of the goal plan"
        required: true
        type: string
      produces:
      - "application/json"
      responses:
        201:
          description: "operation successful"
          schema:
            $ref: "#/definitions/ResponseData"
        500:
          description: "error during update"
          schema:
            $ref: "#/definitions/ResponseData"


#############################################################################################
#############################################################################################
################################## Development ##############################################
#############################################################################################
#############################################################################################

  /development/getDevelopmentGoals:
    get:
      tags:
      - "development"
      summary: "Retrieves the development goals which are defined for a Team Member"
      operationId: getDevelopmentGoals
      parameters:
      - name: "userName"
        in: "query"
        description: "the user for which to query the development plan goals"
        required: true
        type: string
      - name: "goalPlanTemplateId"
        in: "query"
        description: "the goal plan template Id for which to execute the preparation"
        required: false
        type: string
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:  
            type: object
            title: devGoalsResult
            properties:
              developmentGoals:
                type: array
                items:
                  $ref: "#/definitions/DevelopmentGoal"
              availableStatuses:
                type: array
                items:
                  $ref: "#/definitions/DevelopmentGoalStatus"
              responseData:
                $ref: "#/definitions/ResponseData"
              
  /development/upsertDevelopmentGoals:
    post:
      tags:
      - "development"
      summary: "This operation upserts the development goals of the logged in user"
      operationId: upsertDevelopmentGoals
      parameters:
      - name: "goalPlanTemplateId"
        in: "query"
        description: "the goal plan template Id for which to execute the preparation"
        required: false
        type: string
      - name: "developmentGoal"
        in: "body"
        description: "The development Goals to upsert"
        required: true
        schema:
           $ref: "#/definitions/DevelopmentGoal"
      produces:
      - "application/json"
      responses:
        201:
          description: "operation successful"
          schema:
              $ref: "#/definitions/ResponseData"
        500:
          description: "error during update"
          schema:
              $ref: "#/definitions/ResponseData"
              
  /development/deleteDevelopmentGoal:
    delete:
      tags:
      - "development"
      summary: "The operation deleteDevelopmentGoal is called when the Team Member is deleting a development Goal. This only works for Development Goals which are still in Draft status. Not possible in other cases."
      operationId: deleteDevelopmentGoal
      parameters:
      - name: "goalId"
        in: "query"
        description: "the id of the Development Goal to delete"
        required: true
        type: string
      - name: "goalPlanTemplateId"
        in: "query"
        description: "the goal plan template Id for which to execute the preparation. Using the default value if not provided"
        required: false
        type: string
      produces:
      - "application/json"
      responses:
        201:
          description: "operation successful"
          schema:
            $ref: "#/definitions/ResponseData"
        500:
          description: "error during update"
          schema:
            $ref: "#/definitions/ResponseData"
            
    
  
  
  
#######################################################################################################
#######################################################################################################
############################################ Definitions ##############################################
#######################################################################################################
#######################################################################################################

definitions:
  ResponseData:
    type: "object"
    properties:
      key:
        type: "string"
      editStatus:
        type: "string"
      status:
        type: "string"
      message:
        type: "string"  
    xml:
      name: "User"    

  Email:
    type: object
    properties:
      SubscriberKey: 
        type: string
      Address: 
        type: string
      FirstName:
        type: string
      LastName:
        type: string
      Body:
        type: string  

  GoalPlanPicklists:
    type: array
    items: 
      $ref: "#/definitions/GoalPlanPicklist"
      
  GoalPlanPicklist:
    type: object
    properties:
      picklistId: 
        type: string
        description: "field Id of the enum structure"
      key:
        type: string
        description: "value of the enum structure"
      label:
        type: string
      goalPlanId:
        type: string
        
  UserData:
    type: object
    properties:
      username:
        type: string
      firstName:
        type: string
      employeeId:
        type: string
      lastName:
        type: string
      jobCode:
        type: string
      jobId:
        type: string
      positionTitle:
        type: string
      positionId:
        type: string
      brandTitle:
        type: string
      brandId:
        type: string
      department:
        type: string
      departmentId:
        type: string
      photo:
        type: string
      mimeType:
        type: string
      opsSupportCategoryId:
        type: string
      opsSupportCategory:
        description: "custom08-businessUnit of the user"
        type: string
      isTeamLead:
        type: boolean
      
  MeasureOfSuccess:
    type: object
    properties:
      desc:
        type: string
      id:
        type: string
      done:
        description: "Percent complete of the Goal"
        type: string

  
  AvailableTag:
    type: object
    properties:
      fieldId: 
        type: string
      label:
        type: string
      planId: 
        type: string
      value:
        type: string
      isSelected:
        type: boolean
  
  Feedback:
    type: object
    properties:
      id:
        type: string
        format: date
      commentator:
        type: string
      content:
        type: string
      lastModified:
        type: string
        format: date

  Goal:
    type: object
    properties:
      id:
        type: string
      name: 
        type: string
        description: "Stores the title of the goal"
      type:
        type: string
      state: 
        type: string
        description: "Stores the state of the goal"
      stateLabel: 
        type: string
        description: "The label of the current state"
      primaryTag:
        type: string
        description: "Updates customTag1"
      secondaryTag:
        type: string
        description: "Updates customTag2"
      visibility:
        type: boolean
        description: "Updates permissions/privateAccess"
      currentOwner: 
        type: string
      createdBy:
        type: string
        description: "Updates customcreatedby"
      category:
        type: string
      startDate:
        type: string
      dueDate:
        type: string
      hasChanged:
        type: string
      goalRemovalComment:
        type: string
      goalSendfeedback:
        type: string
      customOverallComments:
        type: string
      measuresOfSuccess:
        type: array
        items:
          $ref: "#/definitions/MeasureOfSuccess"
      feedback:
        type: array
        items:
          $ref: "#/definitions/Feedback"
      availableTags:
        type: array
        items:
          $ref: "#/definitions/AvailableTag"

  Goals:
    type: object
    properties:
      goals:
        type: array
        items: 
          $ref: "#/definitions/Goal"
      responseData:
        $ref: "#/definitions/ResponseData"
            
  GoalsForCategory:
    type: object
    properties:
      categoryId:
        type: string
      categoryLabel:
        type: string
      goals:
        type: array
        items:
          $ref: "#/definitions/Goal"
          
  GoalPlanTemplateIdResponse:
    type: object
    properties:
      goalPlanTemplateId: 
        type: string
  
  GoalPlanPicklistsResponse:
    type: object
    properties:
      picklists:
        type: object
        $ref: "#/definitions/GoalPlanPicklists"

  GoalsForUser:
    type: object
    properties:
      categories:
        type: array
        items:
          $ref: "#/definitions/GoalsForCategory"
      responseData:
        $ref: "#/definitions/ResponseData"

  KeyValuePair:
    type: object
    properties:
      key:
        type: string
      value: 
        type: string
        
  UserContextSetting:
    type: object
    properties:
      context:
        type: string
      goalPlanTemplateId:
        type: string
      value: 
        type: string

  TeamMemberDetails:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
      username:
        type: string
      isTeamLeader:
        type: string
        format: boolean
      goalSettingStage:
        type: string
  
  GoalPlanTemplate: 
    type: object
    properties:
      planId:
        type: string
      planLabel: 
        type: string
      picklists:
        $ref: "#/definitions/GoalPlanPicklists"
        
  DevelopmentGoal:
    type: object
    properties:
      id:
        type: string
      name: 
        type: string
        description: "Stores the title of the goal"
      visibility:
        type: boolean
      hasStartDate:
        type: boolean
      modifiedBy:
        type: string
      currentOwner:
        type: string
      startDate:
        type: string
      dueDate:
        type: string
      lastModifiedDate:
        type: string
      state:
        type: string
      type:
        type: string
      measure:
        type: string
      category:
        type: string
      statusKey:
        type: string

  DevelopmentGoalList:
    type: object
    properties:
      developmentGoals:
        type: array
        items:
          $ref: "#/definitions/DevelopmentGoal"
      availableStatuses:
        type: array
        items:
          $ref: "#/definitions/DevelopmentGoalStatus"
          
  DevelopmentGoalStatus:
    type: object
    properties:
      statusKey:
        type: string
      statusLabel:
        type: string
        
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io" 